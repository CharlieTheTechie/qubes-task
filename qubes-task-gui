#!/usr/bin/python3
# qubes-task-gui.py

# TODO following imports somehow needed for execution already built pyinstaller exe
from __future__ import print_function
import xml.etree.ElementTree
import glob
import numbers
import ast
# TODO end of imports which are required by pyinstaller exe

import subprocess
import sys

import json


# Following code ensure that pyinstaller exe use exact needed imports
def append_system_libs():
    # execute the "python3 -c 'import site; print(json.dumps(site.getsitepackages()))'" command and capture the output
    result = subprocess.run(["python3", "-c", "import site, json; print(json.dumps(site.getsitepackages()))"],
                            stdout=subprocess.PIPE)

    # extract the output from the result and parse it as JSON
    output = json.loads(result.stdout)
    # append each path to sys.path
    for path in output:
        sys.path.append(path)


# let's use all libraries from the client to ensure maximum compatibility
append_system_libs()

from PyQt5 import QtWidgets, QtGui, uic
from PyQt5.QtWidgets import (
    QWidget, QApplication, QButtonGroup, QHBoxLayout, QVBoxLayout,
    QCheckBox, QLabel, QLineEdit, QMainWindow, QPushButton, QScrollArea,
    QSizePolicy, QSpacerItem, QTabWidget)

from PyQt5.QtCore import QObject, Qt, pyqtSignal, QProcess
from PyQt5.QtGui import QPainter, QFont, QColor, QPen
# from row import TaskRowWidget
from qubes_task import *
from qubesadmin.tools.qvm_template import Template as Task

_3isec_repo_path = "/etc/yum.repos.d/3isec-dom0.repo"
unman_public_key_path = "/etc/pki/rpm-gpg/RPM-GPG-KEY-unman"

appl = qubesadmin.Qubes()
args = ['dict']
p_args, args = parser.parse_known_args(args)
p_args = parser.parse_args(args, p_args)
p_args.repo_files = REPO_FILE
p_args.updatevm = appl.updatevm


class TaskRowWidget(QWidget):

    def __init__(self, parent, name, summary):
        super(TaskRowWidget, self).__init__()
        self.parent = parent
        self.name = name  # Name of widget used for searching.
        self.summary = summary
        self.is_on = False

        self.setAccessibleName = name
        self.lbl2 = QLabel(self.summary)
        self.checked = QCheckBox(self.name)
        parent.taskGroup.addButton(self.checked)
        self.btn_details = QPushButton("Details")
        self.btn_details.setAccessibleName(name)
        self.btn_details.setCheckable(False)
        self.btn_details.clicked.connect(parent.details_clicked)

        self.hbox = QHBoxLayout()
        self.hbox.addWidget(self.checked, 20)
        self.hbox.addWidget(self.lbl2, 60)
        self.hbox.addWidget(self.btn_details)
        self.setLayout(self.hbox)


class MainWindow(QMainWindow):

    def __init__(self, command='dict', *args, **kwargs):
        super().__init__()

        self.tabWidget = QTabWidget()
        # Create tabs
        self.tabOverview = QWidget()
        self.tabTasks = QWidget()

        # Add tabs to the tab widget
        self.tabWidget.addTab(self.tabOverview, "Overview")
        self.tabWidget.addTab(self.tabTasks, "Tasks")

        # Tab overview
        v_layout_overview = QVBoxLayout()
        label = QLabel("Task manager")
        v_layout_overview.addWidget(label)
        self.tabOverview.setLayout(v_layout_overview)

        # Tab tasks
        self.tasksLayout = QVBoxLayout()  # Tasks container layout.
        self.taskGroup = QButtonGroup()
        self.taskGroup.setExclusive(False)

        self.is_3isec_repo_inited = (os.path.isfile(_3isec_repo_path) and os.path.isfile(unman_public_key_path))

        if self.is_3isec_repo_inited:
            self.get_repos()
            self.widgets = []
            for name in self.widget_names:
                detail = self.outputs[name]['summary']
                item = TaskRowWidget(self, name, detail)
                self.tasksLayout.addWidget(item)
                self.widgets.append(item)
        else:
            QtWidgets.QMessageBox.warning(
                self,
                self.tr("3isec repo is not installed"),
                self.tr("All installation require i3sec installation! EXIT 0"))
            exit(0)

        spacer = QSpacerItem(1, 1, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.tasksLayout.addItem(spacer)
        self.tasks.setLayout(self.tasksLayout)
        self.lbl = QLabel(""" Description
        """)
        self.lbl.setAlignment(Qt.AlignTop)
        # Scroll Area Properties.
        self.scroll = QScrollArea()
        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.tasks)

        self.scroll2 = QScrollArea()
        self.scroll2.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll2.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll2.setWidgetResizable(True)
        self.scroll2.setWidget(self.lbl)

        self.searchbar = QLineEdit()
        self.btn_install = QPushButton("Install")
        self.btn_install.setCheckable(False)
        self.btn_install.clicked.connect(self.install_tasks)

        # Add the items to VBoxLayout (applied to container widget)
        # which encompasses the whole window.
        containerLayout = QVBoxLayout()
        # containerLayout.addWidget(self.searchbar)
        containerLayout.addWidget(self.btn_install)
        containerLayout.addWidget(self.scroll, 60)
        containerLayout.addWidget(self.scroll2, 40)

        self.tabTasks.setLayout(containerLayout)
        self.setCentralWidget(self.tabWidget)

        self.setGeometry(600, 100, 900, 600)
        self.setWindowTitle('Qubes Task Manager')
        self.setWindowIcon = QtGui.QIcon.fromTheme("qubes-manager")

    def get_repos(self):
        self.outputs = {}
        self.outputs = list_tasks(p_args, appl, 'dict')
        self.widget_names = self.outputs.keys()

    def details_clicked(widget, state):
        sending_widget = widget.sender()
        name = (sending_widget.accessibleName())
        desc = widget.outputs[name]['description']
        w.lbl.setText(desc)

    def install_tasks(widget, state):
        update_cmd = "sudo qubes-dom0-update "
        prefix = "3isec-qubes-"
        checked_buttons = [i for i, button in enumerate(w.taskGroup.buttons()) if button.isChecked()]
        pkgs_to_install = []
        for i in checked_buttons:
            pkgs_to_install.append(prefix + w.taskGroup.buttons()[i].text())
        try:
            install_list = " ".join(pkgs_to_install)
            child = subprocess.Popen(update_cmd + install_list, shell=True)
            output = child.communicate()[0]
        except Exception as e:  # pylint: disable=broad-except
            # output = child.communicate()[0]
            return 1
        return 0


app = QtWidgets.QApplication(sys.argv)
w = MainWindow()
w.show()
sys.exit(app.exec_())
